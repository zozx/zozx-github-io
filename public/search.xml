<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开启Secure Boot的情况下使用Linux的经历</title>
      <link href="/2022/01/24/2022-1-24-an-experience-of-using-secure-boot-with-linux/"/>
      <url>/2022/01/24/2022-1-24-an-experience-of-using-secure-boot-with-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>首先，说一下我这边的环境是可以正常使用的，但是并不确定是否会有特殊的机型不支持。</p><table><thead><tr><th align="left">环境</th><th align="left">名称</th></tr></thead><tbody><tr><td align="left">系统</td><td align="left">Gentoo</td></tr><tr><td align="left">电脑</td><td align="left">Alienware M15 R1</td></tr><tr><td align="left">Bootloader</td><td align="left">systemd-boot</td></tr></tbody></table><h3 id="使用PreLoader-Microsoft签名"><a href="#使用PreLoader-Microsoft签名" class="headerlink" title="使用PreLoader (Microsoft签名)"></a>使用PreLoader (Microsoft签名)</h3><p>这个方法适合懒得折腾的朋友。首先，下载PreLoader的方案有两个，一是手动去网站上下载，网站是<code>https://blog.hansenpartnership.com/linux-foundation-secure-boot-system-released</code>，二是我在我的overlay里打了个preloader-signed的ebuild，大家可以直接拿来用，overlay的地址是<code>https://github.com/zozx/zozx-overlay</code>，可以通过如下方式开启 (想直接从repo里拿走也随意)</p><pre class=" language-bash"><code class="language-bash">eselect repository <span class="token function">enable</span> zozx-overlay<span class="token comment" spellcheck="true"># 或者</span>layman -a zozx-overlay<span class="token comment" spellcheck="true"># 接着同步并emerge一下</span>emerge --sync <span class="token operator">&amp;&amp;</span> emerge -v preloader-signed</code></pre><p>接着就是配置PreLoader了</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/preloader-signed/<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;PreLoader,HashTool&amp;#125;.efi path-to-bootloader # path-to-bootloader请以自己机子的bootloader位置为主</span>efibootmgr -v -c -L <span class="token string">"PreLoader"</span> -l path-to-PreLoader.efi <span class="token comment" spellcheck="true"># 没有efibootmgr的自己装一下，path-to-Preloader.efi请以自己机子复制到esp后的位置为主</span><span class="token function">reboot</span> <span class="token comment" spellcheck="true"># 请进入BIOS并自己开启Secure Boot</span></code></pre><p>重启之后PreLoader会报Hash有问题，并且进入HashTool，添加一下Bootloader的efi文件和vmlinuz&#x2F;BzImage.efi即可</p><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>这种方式相对比较简单，而且不用修改BIOS里边的PK,KEK,db，比较通用，我目前使用的是自己的签名，至于方式，可以参考<code>https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Using_your_own_keys</code>，注意要开启Setup Mode，还有就是sbkeysync报错的话可以使用BIOS里自带的功能来更换 (部分BIOS不支持)</p>]]></content>
      
      
      <categories>
          
          <category> EFI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SecureBoot </tag>
            
            <tag> EFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对rEFInd这个bootloader的感受</title>
      <link href="/2022/01/03/2022-1-3-feeling-about-refind/"/>
      <url>/2022/01/03/2022-1-3-feeling-about-refind/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我经常在我的主力机上更换bootloader，我使用过systemd-boot,efistub(通过efibootmgr添加&#x2F;uefi固件中手动添加),grub2和syslinux。这次我换到了rEFInd。</p><h3 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h3><p>rEFInd是一个仅支持EFI的bootloader，他的特色是有图形化的界面，每一个图标可以对应一个引导项，可以对应发行版选择图标，有着简单易懂的配置文件，定制性高。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>网上有不少好看的主题，动手能力强的人也可以自己定制主题。可以为启动项添加多个默认启动参数，可自动检测可执行的efi文件，同时也一样可以手动添加启动项，而且默认的配置文件中有范例</p><h3 id="使用中发现的一些问题"><a href="#使用中发现的一些问题" class="headerlink" title="使用中发现的一些问题"></a>使用中发现的一些问题</h3><p>虽然他有对多个发行版设置图标，但检测发行版的能力欠佳，在不设置的情况下，容易将内核认作未知发行版，而且它默认的主题说实话难以恭维。</p><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>总的来说，rEFInd算是一个很不错的bootloader，EFI用户可以尝试一下。</p>]]></content>
      
      
      <categories>
          
          <category> EFI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EFI </tag>
            
            <tag> Bootloader </tag>
            
            <tag> rEFInd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试以musl作为libc安装Gentoo之后的想法和建议</title>
      <link href="/2021/11/28/2021-11-28-feeling-after-installing-gentoo-with-musl-libc/"/>
      <url>/2021/11/28/2021-11-28-feeling-after-installing-gentoo-with-musl-libc/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>昨天，我在虚拟机里装了一遍musl下的Gentoo，虽然总体上没什么大问题，但是还是有一点小坑的，我在这里就简单的说一下。</p><h3 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h3><p>解决完分区和网络后，就要开始挑选合适的stage3了，记得要挑选带有musl标志的stage3，例如这个<code>stage3-amd64-musl-20211121T170545Z.tar.xz</code>，不过记得一点，musl只能和OpenRC配合。(至少目前在Gentoo里是这样的)</p><h3 id="Overlays"><a href="#Overlays" class="headerlink" title="Overlays"></a>Overlays</h3><ul><li>使用musl，<strong>最基本</strong>的一点就是要添加一个叫做<code>musl</code>的overlay，可以手动添加或者使用如下命令:</li></ul><pre class=" language-bash"><code class="language-bash">eselect repository <span class="token function">enable</span> musl <span class="token comment" spellcheck="true">#适用于使用eselect-repository的用户</span><span class="token comment" spellcheck="true"># 或者</span>layman -a musl <span class="token comment" spellcheck="true">#适用于使用layman的用户</span></code></pre><ul><li>然后我建议添加一下Gentoo-zh社区里一位菊苣的overlay，这里面解决了<code>musl</code>这个overlay以及main repo里都有问题的包，并且对全局clang用户也很友好，下边是添加的方式(因为我不是layman用户，不太清楚，就不讲如何通过layman来添加了):</li></ul><pre class=" language-bash"><code class="language-bash">eselect repository add 12101111-overlay <span class="token function">git</span> https://github.com/12101111/overlay.git</code></pre><h3 id="软件包的问题"><a href="#软件包的问题" class="headerlink" title="软件包的问题"></a>软件包的问题</h3><p>部分在main repo里的包对musl没有支持，导致会无法成功编译，那么下面就说一下这个问题：</p><ol><li>首先我建议直接mask掉main repo和<code>musl</code>里的<code>dev-lang/rust</code>这个包，使用<code>12101111-overlay</code>里的，这样会减少问题，并且不建议使用<code>dev-lang/rust-bin</code>，会出现其他包的问题。</li><li>然后第二点就是main repo里的<code>sys-kernel/linux-headers</code>这个包也是需要mask掉的，否则部分包将会出现问题，例如<code>sys-fs/btrfs-progs</code></li></ol><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>最后，我还是建议刚入门的朋友先练习一下再上musl，这个东西需要有耐心，看到报错的包要试试其他overlay里的有没有问题，因为main repo对musl的支持还不是很完善。</p>]]></content>
      
      
      <categories>
          
          <category> Gentoo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
            <tag> musl </tag>
            
            <tag> libc </tag>
            
            <tag> 建议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo 安装教程</title>
      <link href="/2021/11/15/2021-11-15-gentoo-installation-guide/"/>
      <url>/2021/11/15/2021-11-15-gentoo-installation-guide/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信看到这篇文章的各位都已经对Gentoo这个Linux发行版有一定了解了，那么我们就直接开门见山，开始这篇教程，先说一下，本教程偏新手向，且比较简单，不能满足读者需求的话，可以看看这几篇：</p><h4 id="1-Gentoo-Linux-安装及使用指南"><a href="#1-Gentoo-Linux-安装及使用指南" class="headerlink" title="1. Gentoo Linux 安装及使用指南"></a>1. <a href="https://bitbili.net/gentoo-linux-installation-and-usage-tutorial.html">Gentoo Linux 安装及使用指南</a></h4><h4 id="2-在Mac上安装Gentoo-Linux"><a href="#2-在Mac上安装Gentoo-Linux" class="headerlink" title="2. 在Mac上安装Gentoo Linux"></a>2. <a href="https://www.yafa.moe/post/install-gentoo-on-mac/">在Mac上安装Gentoo Linux</a></h4><h4 id="3-Gentoo-安装"><a href="#3-Gentoo-安装" class="headerlink" title="3. Gentoo 安装"></a>3. <a href="https://litterhougelangley.life/blog/2021/05/21/gentoo/">Gentoo 安装</a></h4><h4 id="4-The-Unorthodox-Gentoo-Handbook-I"><a href="#4-The-Unorthodox-Gentoo-Handbook-I" class="headerlink" title="4. The Unorthodox Gentoo Handbook I"></a>4. <a href="https://blog.bugsur.xyz/gentoo-handbook-installation/">The Unorthodox Gentoo Handbook I</a></h4><h3 id="打算"><a href="#打算" class="headerlink" title="打算"></a>打算</h3><p>下边是我这次安装时的情况，本文以该情况为主，其他情况有问题的朋友可以在下面评论去直接问，看到的我都会尽我所能地回答。</p><table><thead><tr><th align="left">&#x2F;</th><th align="left">选择</th></tr></thead><tbody><tr><td align="left">libc</td><td align="left">glibc</td></tr><tr><td align="left">init script</td><td align="left">systemd</td></tr><tr><td align="left">bootloader</td><td align="left">GRUB</td></tr><tr><td align="left">kernel</td><td align="left">liquorix-sources</td></tr></tbody></table><h3 id="刻录USB"><a href="#刻录USB" class="headerlink" title="刻录USB"></a>刻录USB</h3><p>首先在下载一个livecd, 我推荐manjaro的或者fedora（电报里的朋友推荐ubuntu也不错，我都用过，喜欢fedora的，但是arch系有genfstab这个方便的fstab生成器，所以还是要看个人)，具体可以去<code>https://mirrors6.tuna.tsinghua.edu.cn</code>或者自己喜欢的镜像站下载<br>下载完之后如果你是linux用户，可以通过以下步骤刻录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">dd</span> if<span class="token operator">=</span><span class="token operator">&lt;</span>iso文件<span class="token operator">></span> of<span class="token operator">=</span>/dev/<span class="token operator">&lt;</span>device<span class="token operator">></span> bs<span class="token operator">=</span>1M status<span class="token operator">=</span>progress</code></pre><p>如果你是windows用户，则可以下载<code>rufus</code>来刻录，因为<code>rufus</code>有图形界面，就不细讲了</p><h3 id="配置网络环境"><a href="#配置网络环境" class="headerlink" title="配置网络环境"></a>配置网络环境</h3><p>进入livecd后，首先当然是要联网。如果你是有线网，则无需配置，一般已经通过<code>NetworkManager</code>或者<code>dhcpcd</code>连接</p><p>而如果你是使用无线网，可以使用<code>NetworkManager</code>(gui&#x2F;tui&#x2F;cli工具)或者<code>wpa_supplicant/iwd</code>(cli工具)来连接，下边使用<code>wpa_supplicant</code>的方式来连接:</p><pre class=" language-bash"><code class="language-bash">wpa_passphrase <span class="token operator">&lt;</span>ESSID<span class="token operator">></span> <span class="token operator">&lt;</span>Password<span class="token operator">></span> <span class="token operator">></span> /etc/wpa_supplicant.confwpa_supplicant -iwlan0 -c/etc/wpa_supplicant.conf <span class="token comment" spellcheck="true">#wlan0根据情况更换，可能会叫做wlp112s0或其他名字</span></code></pre><h3 id="配置分区"><a href="#配置分区" class="headerlink" title="配置分区"></a>配置分区</h3><p>首先，我们查看一下存储设备</p><pre class=" language-bash"><code class="language-bash"><span class="token function">fdisk</span> -l<span class="token comment" spellcheck="true"># 或者</span>lsblk</code></pre><p>然后我推荐通过cfdisk进行图形化的分区</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cfdisk</span> -z /dev/nvme0n1 <span class="token comment" spellcheck="true">#nvme0n1根据情况更换</span></code></pre><p><img src="https://raw.githubusercontent.com/zozx/zozx.github.io/master/images/2021-11-15-gentoo_installation_guide/2021-11-17_19-00.png" alt="我的分区"></p><p>分区结束后，轮到了格式化环节，这里，我的方案是:</p><table><thead><tr><th>名称</th><th>用途&#x2F;大小</th><th>挂载点</th><th>文件系统</th></tr></thead><tbody><tr><td>&#x2F;dev&#x2F;nvme0n1p1</td><td>esp分区&#x2F;100M(精简内核空间占用小，其实这里算是给多了)</td><td>&#x2F;boot</td><td>Fat32</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1p2</td><td>swap分区&#x2F;16G(一般来说swap分区设置为内存的1-2倍即可)</td><td><em>none</em></td><td>swap</td></tr><tr><td>&#x2F;dev&#x2F;nvme0n1p3</td><td>根分区&#x2F;余下全部(这里我没有细分&#x2F;home等分区)</td><td>&#x2F;</td><td>Btrfs</td></tr></tbody></table><p>下面是具体操作</p><pre class=" language-bash"><code class="language-bash">mkfs.fat -F 32 /dev/nvme0n1p1 <span class="token comment" spellcheck="true">#创建fat32的esp分区</span>mkswap /dev/nvme0n1p2 <span class="token comment" spellcheck="true">#创建swap分区</span>mkfs.btrfs /dev/nvme0n1p3 <span class="token comment" spellcheck="true">#创建根分区，使用btrfs</span></code></pre><p>因为我使用Btrfs子分区作为根分区，所以下边还有一些小操作，不感兴趣的大家可以忽略</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mount</span> -t btrfs /dev/nvme0n1p3 /mnt<span class="token function">cd</span> /mntbtrfs subvolume create vol_root<span class="token function">cd</span> /<span class="token function">umount</span> -lR /mnt</code></pre><p>下边挂载并进入分区</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mnt/gentoo<span class="token function">mount</span> -t btrfs -o relatime,rw,compress<span class="token operator">=</span>zstd:10,space_cache<span class="token operator">=</span>v2,subvol<span class="token operator">=</span>vol_root /dev/nvme0n1p3 /mnt/gentoo <span class="token comment" spellcheck="true">#使用其他文件系统的请看下一行</span><span class="token function">mount</span> /dev/nvme0n1p3 /mnt/gentoo <span class="token comment" spellcheck="true">#跟着我使用btrfs的朋友请看上一行</span><span class="token function">mkdir</span> -p /mnt/gentoo/boot<span class="token function">mount</span> /dev/nvme0n1p1 /mnt/gentoo/bootswapon /dev/nvme0n1p2<span class="token function">cd</span> /mnt/gentoo</code></pre><h3 id="配置stage3"><a href="#配置stage3" class="headerlink" title="配置stage3"></a>配置stage3</h3><p>从任意一个镜像源下载stage3，如果在tty下，可以选择使用lynx，命令如下</p><pre class=" language-bash"><code class="language-bash">lynx https://mirrors6.tuna.tsinghua.edu.cn/gentoo/releases/amd64/autobuilds</code></pre><p>具体的stage3包要自己选择，可以选择默认的init script，libc以及profile</p><p>我这里就以systemd为例</p><p>下载完毕后通过以下命令解压</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> xpvf stage3-amd64-*.tar.xz --xattrs-include<span class="token operator">=</span><span class="token string">'*.*'</span> --numeric-owner</code></pre><p>解压完配置一下fstab，如果是livecd是arch系的，可以使用如下命令直接进行生成</p><pre class=" language-bash"><code class="language-bash">genfstab -U /mnt/gentoo <span class="token operator">></span> /mnt/gentoo/etc/fstab</code></pre><p>接着修改一下<code>make.conf</code>，我在这里就简单的展示一下我的(经过提醒，增加了些许注释)，具体可以自己微调，不建议直接抄功课，例如这里的<code>skylake</code>就是针对我的Coffee Lake架构的CPU写的，不同架构不一样</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># These settings were set by the catalyst build script that automatically</span><span class="token comment" spellcheck="true"># built this stage.</span><span class="token comment" spellcheck="true"># Please consult /usr/share/portage/config/make.conf.example for a more</span><span class="token comment" spellcheck="true"># detailed example.</span>NTHREADS<span class="token operator">=</span>12 <span class="token comment" spellcheck="true">#这里是线程数</span>COMMON_FLAGS<span class="token operator">=</span><span class="token string">"-march=skylake -O3 -pipe -fgraphite-identity -floop-nest-optimize -fno-stack-protector -fno-align-functions -fno-align-jumps -fno-align-loops -fno-align-labels"</span> <span class="token comment" spellcheck="true">#这个COMMON_FLAGS需要给gcc添加graphite的use才可以用，不知道CPU架构的可以上wiki看看或者直接使用-march=native</span>CFLAGS<span class="token operator">=</span><span class="token string">"$&amp;#123;COMMON_FLAGS&amp;#125;"</span>CXXFLAGS<span class="token operator">=</span><span class="token string">"$&amp;#123;COMMON_FLAGS&amp;#125;"</span>FFLAGS<span class="token operator">=</span><span class="token string">"$&amp;#123;COMMON_FLAGS&amp;#125;"</span>FCFLAGS<span class="token operator">=</span><span class="token string">"$&amp;#123;COMMON_FLAGS&amp;#125;"</span>LDFLAGS<span class="token operator">=</span><span class="token string">"-Wl,-O3 -Wl,--as-needed -Wl,--hash-style=gnu -Wl,--sort-common -Wl,--strip-all"</span> <span class="token comment" spellcheck="true">#这个LDFLAGS会使networkmanager这个包过不了，需要手动设置env，不建议新手使用</span>RUSTFLAGS<span class="token operator">=</span><span class="token string">"-C opt-level=3 -C target-cpu=skylake"</span> <span class="token comment" spellcheck="true">#不知道CPU架构的可以上wiki看看或者直接使用-march=native</span><span class="token comment" spellcheck="true"># NOTE: This stage was built with the bindist Use flag enabled</span>PORTDIR<span class="token operator">=</span><span class="token string">"/var/db/repos/gentoo"</span>DISTDIR<span class="token operator">=</span><span class="token string">"/var/cache/distfiles"</span>PKGDIR<span class="token operator">=</span><span class="token string">"/var/cache/binpkgs"</span>PORTAGE_TMPDIR<span class="token operator">=</span><span class="token string">"/tmp"</span> <span class="token comment" spellcheck="true">#在systemd下，/tmp目录默认为tmpfs，即内存，不建议内存小的朋友使用</span><span class="token comment" spellcheck="true"># This sets the language of build output to English.</span><span class="token comment" spellcheck="true"># Please keep this setting intact when reporting bugs.</span>LC_MESSAGES<span class="token operator">=</span>CMAKEOPTS<span class="token operator">=</span><span class="token string">"-j$&amp;#123;NTHREADS&amp;#125; -l$&amp;#123;NTHREADS&amp;#125;"</span>PORTAGE_NICENESS<span class="token operator">=</span>15GENTOO_MIRRORS<span class="token operator">=</span><span class="token string">"https://mirrors6.tuna.edu.cn/gentoo"</span> <span class="token comment" spellcheck="true">#请自行选择一个比较快的站点</span>USE<span class="token operator">=</span><span class="token string">"systemd lto pgo graphite ccache staging bluetooth alsa pulseaudio ffmpeg openssl network wifi networkmanager connection-sharing iptables zstd lz4 7zip rar btrfs policykit dbus qemu vdpau vaapi vulkan vkd3d d3d9 nvidia nvenc steamfonts trayicon systray -pipewire -joystick -games -education -wayland -xinerama -firewall -ppp -iwd -dhclient -elogind -kaccounts -webengine -kwallet -bittorrent -phonon -vlc -gnome -gnome-keyring -gnome-shell -gnome-online-accounts -passwdqc -bindist -clang -ssp -dhcpcd -netifrc -consolekit -doc -gtk-doc -handbook -spell -grub -oss -gpm"</span> <span class="token comment" spellcheck="true">#USE这个东西因个人需求与电脑配置而异，不建议直接复制</span>ACCEPT_KEYWORDS<span class="token operator">=</span><span class="token string">"~amd64"</span> <span class="token comment" spellcheck="true">#不建议新手直接全局开启带有~的keywords，随时可能出现未知问题</span>ACCEPT_LICENSE<span class="token operator">=</span><span class="token string">"*"</span> <span class="token comment" spellcheck="true">#建议不计较license的朋友直接开*，这样可以省不少事</span>GRUB_PLATFORMS<span class="token operator">=</span><span class="token string">"efi-64"</span> <span class="token comment" spellcheck="true">#使用GRUB+EFI的话请添加此行</span>EMERGE_DEFAULT_OPTS<span class="token operator">=</span><span class="token string">"--keep-going --with-bdeps=y --jobs=$&amp;#123;NTHREADS&amp;#125; --load-average=$&amp;#123;NTHREADS&amp;#125;"</span>L10N<span class="token operator">=</span><span class="token string">"en-US zh-CN en zh"</span>LINGUAS<span class="token operator">=</span><span class="token string">"en_US zh_CN en zh"</span>VIDEO_CARDS<span class="token operator">=</span><span class="token string">"nvidia intel i965 iris"</span> <span class="token comment" spellcheck="true">#我这里是Intel核显加上NVIDIA的独显</span>ALSA_CARDS<span class="token operator">=</span><span class="token string">"hda-intel"</span>INPUT_DEVICES<span class="token operator">=</span><span class="token string">"libinput"</span> <span class="token comment" spellcheck="true">#这个基本上可以算是承包大部分输入设备了</span>LLVM_TARGETS<span class="token operator">=</span><span class="token string">"X86 NVPTX"</span> <span class="token comment" spellcheck="true">#一般只开X86即可，N卡可以开多个NVPTX，A卡可以开多个AMDGPU</span>RUBY_TARGETS<span class="token operator">=</span><span class="token string">"ruby30"</span>ABI_X86<span class="token operator">=</span><span class="token string">"64 32"</span> <span class="token comment" spellcheck="true">#这个不建议开，我是因为要用wine-staging,lutris等包才贪方便装的</span>MICROCODE_SIGNATURES<span class="token operator">=</span><span class="token string">"-S"</span> <span class="token comment" spellcheck="true">#如果要将intel的microcode编入内核就请留下这行</span>FEATURES<span class="token operator">=</span><span class="token string">"ccache"</span> <span class="token comment" spellcheck="true">#安装ccache前不要打开</span>CCACHE_DIR<span class="token operator">=</span><span class="token string">"/var/cache/ccache"</span> <span class="token comment" spellcheck="true">#安装ccache前不要打开</span>CPU_FLAGS_X86<span class="token operator">=</span><span class="token string">"aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4_1 sse4_2 ssse3"</span> <span class="token comment" spellcheck="true">#这个因CPU而异，可以通过cpuid2cpuflags查看</span>CONFIG_PROTECT<span class="token operator">=</span><span class="token string">"/usr/share/sddm/scripts/Xsetup"</span>UNINSTALL_IGNORE<span class="token operator">=</span><span class="token string">"/bin /lib /lib64 /sbin /usr/sbin"</span> <span class="token comment" spellcheck="true">#不进行usr-merge的朋友请忽略这一行</span></code></pre><p>然后再通过如下命令设置main repo的repos.conf</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mnt/gentoo/etc/portage/repos.conf<span class="token function">cp</span> /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf</code></pre><p>然后把<code>sync-uri</code>处修改一下，建议rsync的话使用北外的，如下</p><pre class=" language-bash"><code class="language-bash">sync-uri <span class="token operator">=</span> rsync://mirrors.bfsu.edu.cn/gentoo-portage</code></pre><p>接着就是chroot进系统了，命令如下</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> --dereference /etc/resolv.conf /mnt/gentoo/etc/resolv.conf<span class="token function">mount</span> -t proc /proc /mnt/gentoo/proc<span class="token function">mount</span> --rbind /sys /mnt/gentoo/sys<span class="token function">mount</span> --make-rslave /mnt/gentoo/sys<span class="token function">mount</span> --rbind /dev /mnt/gentoo/dev<span class="token function">mount</span> --make-rslave /mnt/gentoo/dev<span class="token function">chroot</span> /mnt/gentoo /bin/bashenv-update <span class="token operator">&amp;&amp;</span> <span class="token keyword">.</span> /etc/profile</code></pre><p>之后是通过命令<code>emerge-webrsync</code>同步repo，同步完之后让我们再修改一些package的use，命令如下</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'app-text/ghostscript-gpl -l10n_zh-CN'</span> <span class="token operator">></span> /etc/portage/package.use/ghostscript-gpl <span class="token comment" spellcheck="true">#为了避免安装宋体，去掉该包的zh-CN支持</span></code></pre><p>如果需要更强的性能，并且时间充裕，可以开启<code>pgo</code>以及<code>lto</code>还有<code>graphite</code>优化，操作如下</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'sys-devel/gcc pgo lto graphite'</span> <span class="token operator">></span> /etc/portage/package.use/gccemerge -v1 gcceselect gcc listeselect gcc <span class="token keyword">set</span> X <span class="token comment" spellcheck="true">#X为更新版的gcc</span>env-update <span class="token operator">&amp;&amp;</span> <span class="token keyword">.</span> /etc/profileemerge --depclean</code></pre><p>接着读一下新闻: <code>eselect news read</code>，下一步就是更新<code>@world</code>，使用以下命令:</p><pre class=" language-bash"><code class="language-bash">USE<span class="token operator">=</span>-bluetooth emerge -1 python <span class="token comment" spellcheck="true">#此处是为了脱离循环依赖</span>emerge -avuDN @worldemerge --depclean</code></pre><p>结束之后通过<code>etc-update</code>解决&#x2F;etc里新增的文件</p><p>然后就是配置时间和locale以及hostname</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/timezone<span class="token function">nano</span> -w /etc/locale.gen------------------------------------------------        C.UTF8 UTF-8        en_US.UTF-8 UTF-8        zh_CN.UTF-8 UTF-8------------------------------------------------locale-geneselect locale list <span class="token comment" spellcheck="true">#这里看看就好，暂时不用改，改了中文会乱码</span>eselect locale <span class="token keyword">set</span> n <span class="token comment" spellcheck="true">#n是对应的数字</span><span class="token keyword">echo</span> <span class="token string">'ALIENWARE'</span> <span class="token operator">></span> /etc/hostname <span class="token comment" spellcheck="true">#设置主机名，如果不设置，则可能为(none)或localhost</span></code></pre><p>安装一些小工具</p><pre class=" language-bash"><code class="language-bash">emerge -av networkmanager dev-vcs/git btrfs-progs neovim eselect-repository systemd-cron doas mlocate intel-microcode grub:2 <span class="token comment" spellcheck="true">#针对个人更改,例如大家如果更喜欢sudo,就可以把doas换成sudo(也可以都不用就是了)</span></code></pre><p>然后可以针对个人进行一些配置：</p><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> NetworkManagersystemctl <span class="token function">enable</span> cron.target<span class="token comment" spellcheck="true">#如果使用sudo,则使用visudo修改文件，设置权限</span>nvim /etc/doas.conf:------------------------------------------------        permit keepenv :wheel        permit nopass keepenv root------------------------------------------------<span class="token comment" spellcheck="true">#如果像我一样去掉了passwdqc的use的话，不用如下配置也可以使用一般的密码</span>nvim /etc/security/passwdqc:------------------------------------------------        min<span class="token operator">=</span>3,3,3,3,3        max<span class="token operator">=</span>8        passphrase<span class="token operator">=</span>0        match<span class="token operator">=</span>4        similar<span class="token operator">=</span>permit        random<span class="token operator">=</span>47        enforce<span class="token operator">=</span>none        retry<span class="token operator">=</span>3------------------------------------------------<span class="token function">passwd</span><span class="token function">ln</span> -sf /proc/self/mounts /etc/mtabsystemd-machine-id-setup</code></pre><h3 id="配置内核与bootloader"><a href="#配置内核与bootloader" class="headerlink" title="配置内核与bootloader"></a>配置内核与bootloader</h3><p>这里的话我推荐使用Houge Langley维护的<code>xanmod-hybrid</code>或者<code>liquorix-sources</code>，具体步骤如下</p><pre class=" language-bash"><code class="language-bash">eselect repository <span class="token function">enable</span> gentoo-zh<span class="token function">mkdir</span> -p /etc/portage/package.accept_keywords<span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'sys-kernel/liquorix-sources ~amd64'</span> <span class="token operator">>></span> /etc/portage/package.accept_keywords/liquorix-sources <span class="token comment" spellcheck="true">#这里说明一下，如果make.conf中ACCEPT_KEYWORDS="~amd64"，就不需要该步骤</span>emerge -av liquorix-sourceseselect kernel <span class="token keyword">set</span> 1<span class="token function">cd</span> /usr/src/linux<span class="token function">make</span> mrproper<span class="token function">cp</span> /var/db/repos/gentoo-zh/sys-kernel/liquorix-sources/config/default-config /usr/src/linux/.config <span class="token comment" spellcheck="true">#复制一份默认的配置</span><span class="token function">make</span> modules_prepare<span class="token function">make</span> menuconfig<span class="token function">make</span> -jX -lX <span class="token comment" spellcheck="true">#此处X为线程数，可通过lscpu查看</span><span class="token function">make</span> modules_install<span class="token function">make</span> <span class="token function">install</span></code></pre><p>具体配置的话我就不细讲了，然后如果想节约时间的话，可以使用<code>gentoo-kernel-bin</code>，具体步骤很简单，就是<code>emerge -av gentoo-kernel-bin</code></p><p>接着配置一下GRUB</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用EFI的话，请用如下命令</span>grub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot --bootloader-id<span class="token operator">=</span>GRUB <span class="token comment" spellcheck="true"># --efi-directory后面接的是esp分区</span><span class="token comment" spellcheck="true"># BIOS的话，则使用如下命令</span>grub-install --target<span class="token operator">=</span>i386-pc /dev/sdX <span class="token comment" spellcheck="true"># /dev/sdX指的是系统所在硬盘，根据情况自己查看。</span><span class="token comment" spellcheck="true">#配置grub.cfg</span>grub-mkconfig -o /boot/grub/grub.cfg</code></pre><p>然后我们简单的创建一个个人使用的用户</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#下边的zozx是用户名，按需更改</span><span class="token function">useradd</span> -m -G wheel,video,kvm,usb,users,portage,plugdev zozx<span class="token function">passwd</span> zozx</code></pre><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>退出chroot环境，取消挂载，然后重启</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span><span class="token function">umount</span> -lR /mnt/gentoo<span class="token function">reboot</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Installation Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gentoo </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
